// delivery.js

// üöö –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
const vehicles = [
  { name: "–∞/–º –¥–æ 1—Ç", maxWeight: 1000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 4000, perKm: 100 },
  { name: "–∞/–º –¥–æ 1.5—Ç", maxWeight: 1500, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 4000, perKm: 100 },
  { name: "–∞/–º –¥–æ 3—Ç", maxWeight: 3000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 4500, perKm: 115 },
  { name: "–∞/–º 5—Ç", maxWeight: 5000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 5000, perKm: 144 },
  { name: "–∞/–º 5—Ç –≥–∏–¥—Ä–æ–ª–∏—Ñ—Ç", maxWeight: 5000, loadingTypes: ["–≥–∏–¥—Ä–æ–ª–∏—Ñ—Ç"], minTariff: 6000, perKm: 154 },
  { name: "–∞/–º 10—Ç", maxWeight: 10000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 8000, perKm: 210 },
  { name: "–ï–≤—Ä–æ—Ñ—É—Ä–∞ 20—Ç", maxWeight: 20000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 10000, perKm: 250 },
  { name: "–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä 5—Ç", maxWeight: 5000, loadingTypes: ["manipulator"], minTariff: 15000, perKm: 240 },
  { name: "–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä 10—Ç", maxWeight: 10000, loadingTypes: ["manipulator"], minTariff: 20000, perKm: 240 },
  { name: "–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä 15—Ç", maxWeight: 15000, loadingTypes: ["manipulator"], minTariff: 25000, perKm: 240 }
];

// üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
function selectVehicle(totalWeight, loadingType, forceMaxWeight = null) {
  return vehicles.find(v =>
    v.loadingTypes.includes(loadingType) &&
    (forceMaxWeight ? v.maxWeight <= forceMaxWeight : v.maxWeight >= totalWeight)
  );
}

// üí∏ –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —Ç–∏–ø—É –∞–≤—Ç–æ –∏ –∑–∞–≥—Ä—É–∑–∫–µ)
function getLoadingSurcharge(vehicle, loadingType) {
  if (loadingType !== "–≤–µ—Ä—Ö–Ω—è—è" && loadingType !== "–±–æ–∫–æ–≤–∞—è") return 0;

  const name = vehicle.name;

  if (name.includes("–¥–æ 1—Ç") || name.includes("–¥–æ 1.5—Ç") || name.includes("–¥–æ 3—Ç")) return 1500;
  if (name.includes("5—Ç") && !name.includes("–≥–∏–¥—Ä–æ–ª–∏—Ñ—Ç")) return loadingType === "–≤–µ—Ä—Ö–Ω—è—è" ? 2500 : 2000;
  if (name.includes("10—Ç")) return loadingType === "–≤–µ—Ä—Ö–Ω—è—è" ? 3000 : 2500;
  if (name.includes("20—Ç") || name.includes("–ï–≤—Ä–æ—Ñ—É—Ä–∞")) return loadingType === "–≤–µ—Ä—Ö–Ω—è—è" ? 3500 : 3000;

  return 0;
}

// üßÆ –†–∞—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
function calculateDelivery() {
  if (!window.formData) {
    alert("–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
    return;
  }

  const data = window.formData;
  const totalWeight = data.weight_standard + data.weight_large;
  const loadingType = data.loading_type;
  const distance = data.deliveryDistance || 0;
  const extraDistance = Math.max(0, distance - 40);
  const isUnderground = data.underground && parseFloat(data.height_limit) < 2.2;

  let vehiclesUsed = [];
  let cost = 0;

  if (isUnderground) {
    // üöß –ü–∞—Ä–∫–∏–Ω–≥ < 2.2 –º ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ 1.5—Ç –∏ 1—Ç
    let remaining = totalWeight;
    const v15 = vehicles.find(v => v.name.includes("–¥–æ 1.5—Ç") && v.loadingTypes.includes(loadingType));
    const v10 = vehicles.find(v => v.name.includes("–¥–æ 1—Ç") && v.loadingTypes.includes(loadingType));

    const count15 = Math.floor(remaining / 1500);
    remaining -= count15 * 1500;
    const count10 = remaining > 0 ? 1 : 0;

    for (let i = 0; i < count15; i++) vehiclesUsed.push(v15);
    if (count10) vehiclesUsed.push(v10);

    vehiclesUsed.forEach(vehicle => {
      let localCost = vehicle.minTariff + extraDistance * vehicle.perKm;

      const loadingSurcharge = getLoadingSurcharge(vehicle, loadingType);
      localCost += loadingSurcharge;

      if (data.return_pallets) localCost += 2500;
      if (data.precise_time) localCost += 2500;
      if (isUnderground) localCost += 1500;

      cost += localCost;
    });
  } else {
    // üöö –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π ‚Äî –æ–¥–Ω–∞ –º–∞—à–∏–Ω–∞
    const vehicle = selectVehicle(totalWeight, loadingType);
    if (!vehicle) {
      document.getElementById("result").innerHTML = "<p style='color:red;'>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.</p>";
      return;
    }

    vehiclesUsed.push(vehicle);

    cost = vehicle.minTariff + extraDistance * vehicle.perKm;

    const loadingSurcharge = getLoadingSurcharge(vehicle, loadingType);
    cost += loadingSurcharge;

    if (data.return_pallets) cost += 2500;
    if (data.precise_time) cost += 2500;
    if (data.underground) cost += 1500;
  }

  // === üí™ –†–∞—Å—á—ë—Ç –≥—Ä—É–∑—á–∏–∫–æ–≤ ===
  let moversCost = 0;

  if (data.need_movers) {
    const floor = parseInt(data.floor) || 1;
    const hasLift = data.lift === "true";
    const onlyUnload = data.only_unload === "true";

    const largeWeight = data.weight_large;
    const standardWeight = data.weight_standard;
    const format = data.large_format;
    const isLiftFormat = ["100x200", "100x260", "100x280"].includes(format);

    // === 1. –ö—Ä—É–ø–Ω–∞—è –ø–ª–∏—Ç–∫–∞ ===
    if (largeWeight > 0) {
      if (onlyUnload) {
        moversCost += 20 * largeWeight;
      } else if (isLiftFormat && hasLift) {
        moversCost += 30 * largeWeight;
      } else {
        let rate = 50;
        if (floor > 20) rate = 90;
        else if (floor > 10) rate = 70;
        else if (floor > 5) rate = 60;
        moversCost += rate * largeWeight;
      }
    }

    // === 2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–ª–∏—Ç–∫–∞ ===
    if (standardWeight > 0) {
      if (onlyUnload) {
        moversCost += 7 * standardWeight;
      } else if (hasLift) {
        moversCost += 9 * standardWeight;
      } else {
        let rate = 15;
        if (floor > 20) rate = 50;
        else if (floor > 10) rate = 30;
        else if (floor > 5) rate = 20;
        moversCost += rate * standardWeight;
      }
    }

    cost += moversCost;
  }

  // üñ• –í—ã–≤–æ–¥
  let resultHtml = `
    <h3>–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
    <p><strong>–û–±—â–∏–π –≤–µ—Å:</strong> ${totalWeight} –∫–≥</p>
    <p><strong>–¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:</strong> ${loadingType}</p>
    <p><strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ${distance.toFixed(2)} –∫–º</p>
    <p><strong>–ö–æ–ª-–≤–æ —Ä–µ–π—Å–æ–≤:</strong> ${vehiclesUsed.length}</p>
    <ul>${vehiclesUsed.map(v => `<li>${v.name}</li>`).join("")}</ul>
    ${data.return_pallets ? `<p>–í–æ–∑–≤—Ä–∞—Ç —Ç–∞—Ä—ã: 2 500 ‚ÇΩ √ó ${vehiclesUsed.length}</p>` : ""}
    ${data.precise_time ? `<p>–î–æ—Å—Ç–∞–≤–∫–∞ –∫ —Ç–æ—á–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏: 2 500 ‚ÇΩ √ó ${vehiclesUsed.length}</p>` : ""}
    ${data.underground ? `<p>–ü–æ–¥–∑–µ–º–Ω—ã–π –ø–∞—Ä–∫–∏–Ω–≥: 1 500 ‚ÇΩ √ó ${vehiclesUsed.length}</p>` : ""}
    ${data.need_movers ? `<p><strong>–ì—Ä—É–∑—á–∏–∫–∏:</strong> ${Math.round(moversCost).toLocaleString()} ‚ÇΩ</p>` : ""}
    <hr>
    <h3>–ò—Ç–æ–≥–æ: ${Math.round(cost).toLocaleString()} ‚ÇΩ</h3>
  `;

  document.getElementById("result").innerHTML = resultHtml;
}
