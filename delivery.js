<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–ª–∏—Ç–∫–∏</title>
  <style>
    table td, table th { padding: 4px; }
  </style>
</head>
<body>
  <h1>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏</h1>

  <form id="deliveryForm">
    <fieldset>
      <legend>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏</legend>
      –í–µ—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–ª–∏—Ç–∫–∏ (–∫–≥): <input type="number" id="weight_standard" min="0">
      –í–µ—Å –∫—Ä—É–ø–Ω–æ–π –ø–ª–∏—Ç–∫–∏ (–∫–≥): <input type="number" id="weight_large" min="0"><br>

      –§–æ—Ä–º–∞—Ç –∫—Ä—É–ø–Ω–æ–π –ø–ª–∏—Ç–∫–∏:
      <select id="large_format">
        <option value="100x200">100x200</option>
        <option value="100x260">100x260</option>
        <option value="100x280">100x280</option>
        <option value="custom">–î—Ä—É–≥–æ–µ</option>
      </select>
      <br>

      –≠—Ç–∞–∂: <input type="number" id="floor" min="1" value="1">
      <label><input type="checkbox" id="lift"> –ï—Å—Ç—å –ª–∏—Ñ—Ç</label><br>
      <label><input type="checkbox" id="only_unload"> –¢–æ–ª—å–∫–æ –≤—ã–≥—Ä—É–∑–∫–∞</label>
      <label><input type="checkbox" id="need_movers"> –ù—É–∂–Ω—ã –≥—Ä—É–∑—á–∏–∫–∏</label><br>

      –¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:
      <select id="loading_type">
        <option value="–≤–µ—Ä—Ö–Ω—è—è">–í–µ—Ä—Ö–Ω—è—è</option>
        <option value="–±–æ–∫–æ–≤–∞—è">–ë–æ–∫–æ–≤–∞—è</option>
        <option value="–≥–∏–¥—Ä–æ–ª–∏—Ñ—Ç">–ì–∏–¥—Ä–æ–ª–∏—Ñ—Ç</option>
        <option value="manipulator">–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä</option>
        <option value="–ª—é–±–∞—è">–õ—é–±–∞—è</option>
      </select><br>

      –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º): <input type="number" id="distance" min="0"><br>
      <label><input type="checkbox" id="return_pallets"> –í–æ–∑–≤—Ä–∞—Ç —Ç–∞—Ä—ã</label>
      <label><input type="checkbox" id="precise_time"> –î–æ—Å—Ç–∞–≤–∫–∞ –∫ —Ç–æ—á–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏</label>
    </fieldset>

    <button type="button" onclick="saveForm()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</button>
    <button type="button" onclick="calculateDelivery()">–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å</button>
    <button onclick="openAdmin()" type="button">‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞</button>
  </form>

  <div id="delivery_result" style="margin-top: 20px;"></div>
  <div id="admin_panel" style="margin-top:20px;"></div>

<script>
let kmDiscounts = [
  { from: 0, to: 60, coeff: 1 },
  { from: 60, to: 100, coeff: 0.95 },
  { from: 100, to: 150, coeff: 0.9 },
  { from: 150, to: Infinity, coeff: 0.85 },
];

const vehicles = [
  { name: "–∞/–º –¥–æ 1—Ç", maxWeight: 1000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 4000, perKm: 100 },
  { name: "–∞/–º –¥–æ 1.5—Ç", maxWeight: 1500, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 4000, perKm: 100 },
  { name: "–∞/–º –¥–æ 3—Ç", maxWeight: 3000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 4500, perKm: 115 },
  { name: "–∞/–º 5—Ç", maxWeight: 5000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 5000, perKm: 144 },
  { name: "–∞/–º 5—Ç –≥–∏–¥—Ä–æ–ª–∏—Ñ—Ç", maxWeight: 5000, loadingTypes: ["–≥–∏–¥—Ä–æ–ª–∏—Ñ—Ç"], minTariff: 6000, perKm: 154 },
  { name: "–∞/–º 10—Ç", maxWeight: 10000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 8000, perKm: 210 },
  { name: "–ï–≤—Ä–æ—Ñ—É—Ä–∞ 20—Ç", maxWeight: 20000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], minTariff: 10000, perKm: 250 },
  { name: "–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä 5—Ç", maxWeight: 5000, loadingTypes: ["manipulator"], minTariff: 15000, perKm: 240 },
  { name: "–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä 10—Ç", maxWeight: 10000, loadingTypes: ["manipulator"], minTariff: 20000, perKm: 240 },
  { name: "–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä 15—Ç", maxWeight: 15000, loadingTypes: ["manipulator"], minTariff: 25000, perKm: 240 }
];

function saveForm() {
  window.formData = {
    weight_standard: +document.getElementById('weight_standard').value || 0,
    weight_large: +document.getElementById('weight_large').value || 0,
    large_format: document.getElementById('large_format').value,
    floor: parseInt(document.getElementById('floor').value) || 1,
    lift: document.getElementById('lift').checked,
    only_unload: document.getElementById('only_unload').checked,
    need_movers: document.getElementById('need_movers').checked,
    loading_type: document.getElementById('loading_type').value,
    distance: parseFloat(document.getElementById('distance').value) || 0,
    return_pallets: document.getElementById('return_pallets').checked,
    precise_time: document.getElementById('precise_time').checked
  };
  alert("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
}

function getLoadingSurcharge(vehicle, type) {
  if (type === "–ª—é–±–∞—è") return 0;
  if (vehicle.maxWeight <= 3000) return 1500;
  if (vehicle.maxWeight === 5000) return type === "–±–æ–∫–æ–≤–∞—è" ? 2000 : 2500;
  if (vehicle.maxWeight === 10000) return type === "–±–æ–∫–æ–≤–∞—è" ? 2500 : 3000;
  if (vehicle.maxWeight === 20000) return type === "–±–æ–∫–æ–≤–∞—è" ? 3000 : 3500;
  return 0;
}

function getMoversCost(data) {
  if (!data.need_movers) return 0;
  const floor = data.floor;
  const hasLift = data.lift;
  const onlyUnload = data.only_unload;
  const standard = data.weight_standard;
  const large = data.weight_large;
  const format = data.large_format;
  let cost = 0;

  if (large > 0) {
    const liftAllowed = ["100x200", "100x260", "100x280"].includes(format);
    if (onlyUnload) cost += large * 20;
    else if (liftAllowed && hasLift) cost += large * 30;
    else {
      const rate = floor <= 5 ? 50 : floor <= 10 ? 60 : floor <= 20 ? 70 : 90;
      cost += large * rate;
    }
  }

  if (standard > 0) {
    if (onlyUnload) cost += standard * 7;
    else if (hasLift) cost += standard * 9;
    else {
      const rate = floor <= 5 ? 15 : floor <= 10 ? 20 : floor <= 20 ? 30 : 50;
      cost += standard * rate;
    }
  }

  return cost;
}

function selectVehicle(weight, type) {
  return vehicles.find(v => v.maxWeight >= weight && v.loadingTypes.includes(type));
}

function calculateDelivery() {
  const data = window.formData;
  if (!data) return alert("–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");

  const totalWeight = data.weight_standard + data.weight_large;
  const vehicle = selectVehicle(totalWeight, data.loading_type);
  if (!vehicle) return alert("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞");

  const baseTariff = vehicle.minTariff;
  let perKm = vehicle.perKm;
  const km = Math.max(0, data.distance - 40);

  for (let i = 0; i < kmDiscounts.length; i++) {
    const rule = kmDiscounts[i];
    if (km >= rule.from && km < rule.to) {
      perKm *= rule.coeff;
      break;
    }
  }

  const kmCost = km * perKm;
  const loadSurcharge = getLoadingSurcharge(vehicle, data.loading_type);
  const pallets = data.return_pallets ? 2500 : 0;
  const exactTime = data.precise_time ? 2500 : 0;
  const movers = getMoversCost(data);

  const total = baseTariff + kmCost + loadSurcharge + pallets + exactTime + movers;

  document.getElementById("delivery_result").innerHTML = `
    <h3>–ò—Ç–æ–≥–æ: ${total.toLocaleString()} ‚ÇΩ</h3>
    <p><strong>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</strong> ${vehicle.name}</p>
    <p><strong>–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:</strong> ${baseTariff.toLocaleString()} ‚ÇΩ</p>
    <p><strong>–î–æ–ø. –∫–º:</strong> ${km.toFixed(2)} √ó ${perKm.toFixed(0)} ‚ÇΩ = ${kmCost.toLocaleString()} ‚ÇΩ</p>
    ${loadSurcharge > 0 ? `<p>–ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É: ${loadSurcharge.toLocaleString()} ‚ÇΩ</p>` : ""}
    ${data.return_pallets ? `<p>–í–æ–∑–≤—Ä–∞—Ç —Ç–∞—Ä—ã: 2 500 ‚ÇΩ</p>` : ""}
    ${data.precise_time ? `<p>–î–æ—Å—Ç–∞–≤–∫–∞ –∫ —Ç–æ—á–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏: 2 500 ‚ÇΩ</p>` : ""}
    ${movers > 0 ? `<p>–ì—Ä—É–∑—á–∏–∫–∏: ${movers.toLocaleString()} ‚ÇΩ</p>` : ""}
  `;
}

function openAdmin() {
  const pw = prompt("–í–≤–µ–¥–∏—Ç–µ –∞–¥–º–∏–Ω-–ø–∞—Ä–æ–ª—å:");
  if (pw !== "admin2024") return alert("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");

  const panel = document.getElementById("admin_panel");
  panel.innerHTML = "<h3>‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤</h3>";
  const table = document.createElement("table");
  table.innerHTML = `
    <tr><th>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</th><th>–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ (‚ÇΩ)</th><th>‚ÇΩ/–∫–º</th></tr>
  `;
  vehicles.forEach((v, i) => {
    table.innerHTML += `
      <tr>
        <td>${v.name}</td>
        <td><input type="number" id="minTariff_${i}" value="${v.minTariff}" style="width:80px"></td>
        <td><input type="number" id="perKm_${i}" value="${v.perKm}" style="width:60px"></td>
      </tr>
    `;
  });
  panel.appendChild(table);

  const kmTable = document.createElement("table");
  kmTable.innerHTML = `<tr><th>–û—Ç (–∫–º)</th><th>–î–æ (–∫–º)</th><th>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</th></tr>`;
  kmDiscounts.forEach((r, i) => {
    kmTable.innerHTML += `
      <tr>
        <td><input type="number" id="from_${i}" value="${r.from}" style="width:60px"></td>
        <td><input type="number" id="to_${i}" value="${r.to === Infinity ? '' : r.to}" style="width:60px"></td>
        <td><input type="number" step="0.01" id="coeff_${i}" value="${r.coeff}" style="width:60px"></td>
      </tr>
    `;
  });
  panel.innerHTML += "<h3>–°–∫–∏–¥–∫–∏ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ</h3>";
  panel.appendChild(kmTable);

  const saveBtn = document.createElement("button");
  saveBtn.textContent = "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å";
  saveBtn.onclick = () => {
    vehicles.forEach((v, i) => {
      v.minTariff = parseInt(document.getElementById(`minTariff_${i}`).value) || v.minTariff;
      v.perKm = parseInt(document.getElementById(`perKm_${i}`).value) || v.perKm;
    });
    kmDiscounts = kmDiscounts.map((r, i) => ({
      from: parseFloat(document.getElementById(`from_${i}`).value),
      to: parseFloat(document.getElementById(`to_${i}`).value) || Infinity,
      coeff: parseFloat(document.getElementById(`coeff_${i}`).value)
    }));
    localStorage.setItem("vehicleTariffs", JSON.stringify(vehicles));
    localStorage.setItem("kmDiscounts", JSON.stringify(kmDiscounts));
    alert("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!");
  };
  panel.appendChild(saveBtn);
}

(function loadTariffs() {
  const saved = localStorage.getItem("vehicleTariffs");
  if (saved) {
    try {
      const parsed = JSON.parse(saved);
      if (Array.isArray(parsed)) {
        parsed.forEach((v, i) => {
          if (vehicles[i]) {
            vehicles[i].minTariff = v.minTariff;
            vehicles[i].perKm = v.perKm;
          }
        });
      }
    } catch(e) { console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤", e); }
  }
  const discountSaved = localStorage.getItem("kmDiscounts");
  if (discountSaved) {
    try {
      const parsed = JSON.parse(discountSaved);
      if (Array.isArray(parsed)) kmDiscounts = parsed;
    } catch(e) { console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∏–¥–æ–∫", e); }
  }
})();
</script>
</body>
</html>
