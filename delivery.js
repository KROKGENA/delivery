const vehicles = [
  { name: "–∞/–º –¥–æ 1—Ç", maxWeight: 1000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], surchargeTop: 1500, surchargeSide: 1500, minTariff: 4000, perKm: 100 },
  { name: "–∞/–º –¥–æ 1.5—Ç", maxWeight: 1500, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], surchargeTop: 1500, surchargeSide: 1500, minTariff: 4000, perKm: 100 },
  { name: "–∞/–º –¥–æ 3—Ç", maxWeight: 3000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], surchargeTop: 1500, surchargeSide: 1500, minTariff: 4500, perKm: 115 },
  { name: "–∞/–º 5—Ç", maxWeight: 5000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], surchargeTop: 2500, surchargeSide: 2000, minTariff: 5000, perKm: 144 },
  { name: "–∞/–º 5—Ç –≥–∏–¥—Ä–æ–ª–∏—Ñ—Ç", maxWeight: 5000, loadingTypes: ["–≥–∏–¥—Ä–æ–ª–∏—Ñ—Ç"], surchargeTop: 2000, surchargeSide: 2000, minTariff: 6000, perKm: 154 },
  { name: "–∞/–º 10—Ç", maxWeight: 10000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], surchargeTop: 3000, surchargeSide: 2500, minTariff: 8000, perKm: 210 },
  { name: "–ï–≤—Ä–æ—Ñ—É—Ä–∞ 20—Ç", maxWeight: 20000, loadingTypes: ["–≤–µ—Ä—Ö–Ω—è—è", "–±–æ–∫–æ–≤–∞—è", "–ª—é–±–∞—è"], surchargeTop: 3500, surchargeSide: 3000, minTariff: 10000, perKm: 250 },
  { name: "–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä 5—Ç", maxWeight: 5000, loadingTypes: ["manipulator"], surchargeTop: 0, surchargeSide: 0, minTariff: 15000, perKm: 240 },
  { name: "–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä 10—Ç", maxWeight: 10000, loadingTypes: ["manipulator"], surchargeTop: 0, surchargeSide: 0, minTariff: 20000, perKm: 240 },
  { name: "–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä 15—Ç", maxWeight: 15000, loadingTypes: ["manipulator"], surchargeTop: 0, surchargeSide: 0, minTariff: 25000, perKm: 240 },
];

const formatsWithLift = ["100x200", "100x260", "100x280"];

function selectVehicle(totalWeight, loadingType) {
  return vehicles.find(v => v.maxWeight >= totalWeight && v.loadingTypes.includes(loadingType));
}

function calculateDelivery() {
  if (!window.formData) {
    alert("–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
    return;
  }

  const data = window.formData;
  const weight = data.weight_standard + data.weight_large;
  const loading = data.loading_type;
  const distance = data.deliveryDistance || 0;
  const extra = Math.max(0, distance - 40);
  const heightLimit = parseFloat(data.height_limit);
  const forceUseSmallVehicle = data.underground && heightLimit && heightLimit < 2.2;
  let selectedVehicle;

  if (forceUseSmallVehicle) {
    const oneTripVehicle = vehicles.find(v => v.name === "–∞/–º –¥–æ 1.5—Ç");
    const trips = Math.ceil(weight / 1500);
    selectedVehicle = oneTripVehicle;
    selectedVehicle.trips = trips;
  } else {
    selectedVehicle = selectVehicle(weight, loading);
    selectedVehicle.trips = 1;
  }

  if (!selectedVehicle) {
    document.getElementById("result").innerHTML = "<p style='color:red;'>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.</p>";
    return;
  }

  let cost = selectedVehicle.minTariff * selectedVehicle.trips;
  let extraCost = extra * selectedVehicle.perKm * selectedVehicle.trips;
  let surcharge = 0;

  if (loading === "–≤–µ—Ä—Ö–Ω—è—è") surcharge = selectedVehicle.surchargeTop;
  else if (loading === "–±–æ–∫–æ–≤–∞—è") surcharge = selectedVehicle.surchargeSide;

  let text = `
    <h3>–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
    <p><strong>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</strong> ${selectedVehicle.name}${selectedVehicle.trips > 1 ? ` √ó ${selectedVehicle.trips} —Ä–µ–π—Å–∞` : ""}</p>
    <p><strong>–û–±—â–∏–π –≤–µ—Å:</strong> ${weight} –∫–≥</p>
    <p><strong>–¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:</strong> ${loading}</p>
    <p><strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ${distance.toFixed(2)} –∫–º</p>
    <p><strong>–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:</strong> ${selectedVehicle.minTariff.toLocaleString()} ‚ÇΩ √ó ${selectedVehicle.trips} = ${(selectedVehicle.minTariff * selectedVehicle.trips).toLocaleString()} ‚ÇΩ</p>
    <p><strong>–î–æ–ø. –∫–º:</strong> ${extra.toFixed(2)} –∫–º √ó ${selectedVehicle.perKm} ‚ÇΩ √ó ${selectedVehicle.trips} = ${extraCost.toLocaleString()} ‚ÇΩ</p>
  `;

  if (surcharge > 0) {
    cost += surcharge;
    text += `<p><strong>–ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É (${loading}):</strong> ${surcharge.toLocaleString()} ‚ÇΩ</p>`;
  }

  if (data.return_pallets) {
    cost += 2500;
    text += `<p><strong>–í–æ–∑–≤—Ä–∞—Ç —Ç–∞—Ä—ã:</strong> 2 500 ‚ÇΩ</p>`;
  }

  if (data.underground) {
    cost += 1500;
    text += `<p><strong>–ü–æ–¥–∑–µ–º–Ω—ã–π –ø–∞—Ä–∫–∏–Ω–≥:</strong> 1 500 ‚ÇΩ</p>`;
  }

  if (data.precise_time) {
    cost += 2500;
    text += `<p><strong>–î–æ—Å—Ç–∞–≤–∫–∞ –∫ —Ç–æ—á–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏:</strong> 2 500 ‚ÇΩ</p>`;
  }

  // üë∑ –ì—Ä—É–∑—á–∏–∫–∏
  if (data.need_movers) {
    let moverCost = 0;

    const floor = parseInt(data.floor) || 1;
    const hasLift = data.lift === "true";
    const format = data.large_format;
    const largeWeight = data.weight_large || 0;
    const standardWeight = data.weight_standard || 0;

    // –ö—Ä—É–ø–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (largeWeight > 0) {
      if (data.only_unload === "true") {
        moverCost += largeWeight * 20;
      } else {
        if (formatsWithLift.includes(format) && hasLift) {
          moverCost += largeWeight * 30;
        } else {
          let rate = 50;
          if (floor > 5) rate = 60;
          if (floor > 10) rate = 70;
          if (floor > 20) rate = 90;
          moverCost += largeWeight * rate;
        }
      }
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–ª–∏—Ç–∫–∞
    if (standardWeight > 0) {
      if (data.only_unload === "true") {
        moverCost += standardWeight * 7;
      } else {
        if (hasLift) {
          moverCost += standardWeight * 9;
        } else {
          let rate = 15;
          if (floor > 5) rate = 20;
          if (floor > 10) rate = 30;
          if (floor > 20) rate = 50;
          moverCost += standardWeight * rate;
        }
      }
    }

    cost += moverCost;
    text += `<p><strong>–ì—Ä—É–∑—á–∏–∫–∏:</strong> ${Math.round(moverCost).toLocaleString()} ‚ÇΩ</p>`;
  }

  text += `<hr><h3>–ò—Ç–æ–≥–æ: ${Math.round(cost).toLocaleString()} ‚ÇΩ</h3>`;
  document.getElementById("result").innerHTML = text;
}
